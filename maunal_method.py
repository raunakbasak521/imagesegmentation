# -*- coding: utf-8 -*-
"""Maunal_method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/137leptk1RX4nrU6jv6NY_YtqkOrv5ZSq
"""

# Commented out IPython magic to ensure Python compatibility.
#Calling the Segment Anything model from Github
!pip install git+https://github.com/facebookresearch/segment-anything.git

#Calling the folder from drive
# %cd /content/drive/MyDrive/Image Analysis

#Defining the different funcion that are used later in the code
import numpy as np
import torch
import matplotlib.pyplot as plt
import cv2
def show_mask(mask, ax, random_color=False):
    if random_color:
        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)
    else:
        color = np.array([30/255, 144/255, 255/255, 0.6])
    h, w = mask.shape[-2:]
    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)
    ax.imshow(mask_image)

def show_points(coords, labels, ax, marker_size=375):
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)
    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)

def show_box(box, ax):
    x0, y0 = box[0], box[1]
    w, h = box[2] - box[0], box[3] - box[1]
    ax.add_patch(plt.Rectangle((x0, y0), w, h, edgecolor='green', facecolor=(0,0,0,0), lw=2))

# Reading the image (Please enter the image path below)
image = cv2.imread('/content/drive/MyDrive/Image Analysis/new_imageform.bmp')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  #Coverting the BGR to RGB format


#Showing the base image that was uploaded
plt.figure(figsize=(10,10))
plt.imshow(image)
plt.title("Base Image Uploaded")
plt.axis('on')
plt.show()

print()

#Using the model to start predictions
import sys
sys.path.append("..")
from segment_anything import sam_model_registry, SamPredictor
sam_checkpoint = "sam_vit_b_01ec64"
model_type = "vit_b"
sam = sam_model_registry["vit_b"](checkpoint="/content/drive/MyDrive/Image Analysis/sam_vit_b_01ec64.pth")
predictor = SamPredictor(sam)
predictor.set_image(image)

image1 = cv2.imread('/content/drive/MyDrive/Image Analysis/coordinate_example.JPG')
image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)
plt.figure(figsize=(10,10))
plt.imshow(image1)
plt.title("Sample teplate for coordinate input")
plt.axis('off')
plt.show()

print()
print()

mask_area=0

user_coord = input("Enter the box coordinates of all areas including total area (as x11 y11 x12 y12 x21 y21 x22 y22 ...): ")
c = np.array([list(map(int,user_coord.split()))])

n = c.size // 4
coord = c.reshape((n,4))

area_array = [0]*n

for i in range(n):
     input_box = np.array([coord[i,0], coord[i,1], coord[i,2], coord[i,3]])
     masks, _, _ = predictor.predict(
        point_coords=None,
        point_labels=None,
        box=input_box[None, :],
        multimask_output=False,
     )
     plt.figure(figsize=(10, 10))
     plt.imshow(image)
     show_mask(masks[0], plt.gca())
     show_box(input_box, plt.gca())
     plt.axis('off')
     plt.show()
     print()
     mask_area+=np.sum(masks[0]==1)
     area_array[i] = np.sum(masks[0]==1)

print("The total electrode area (in sq pixels) = ", max(area_array))

dry_area = mask_area - max(area_array)
print("Total dry area = ", dry_area)

print("Wetting Fraction = ", 1-(dry_area/mask_area))

